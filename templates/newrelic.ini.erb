;
; Copyright 2020 New Relic Corporation. All rights reserved.
; SPDX-License-Identifier: Apache-2.0
;

; This file contains the various settings for the New Relic PHP agent. There
; are many options, all of which are described in detail at the following URL:
; https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration
;

; If you use a full path to the extension you insulate yourself from the
; extension directory changing if you change PHP installations or versions.
; If you do not use an absolute path then the file must be installed in the
; active configuration's extension directory.
extension = "newrelic.so"

[newrelic]
; Setting: newrelic.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enable or disable the agent. Please note that you cannot globally
;          disable the agent and then selectively enable it on a per-directory
;          basis. If you disable the agent in the global INI file then the
;          agent will not initialize at all. However, you can selectively
;          disable the agent on a per-directory basis.
;
;newrelic.enabled = true
<%- if @newrelic_ini_enabled -%>
newrelic.enabled = <%= @newrelic_ini_enabled %>
<%- end -%>

; Setting: newrelic.license
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Sets the New Relic license key to use. This can vary from directory
;          to directory if you are running a multi-tenant system. By special
;          dispensation if you upgraded from a previous version of the agent
;          where the license key was set in the daemon, the installation and
;          upgrade script will have preserved your license key from the file
;          /etc/newrelic/newrelic.cfg, but ONLY if you installed via rpm/yum
;          or dpkg. The key is saved in /etc/newrelic/upgrade_please.key
;          and the agent will look for that file if you do not specify a valid
;          license here.
;          It is *STRONGLY* recommended that you set the license key in your
;          INI file(s) and do not rely on the key file being present. Also
;          please note that even if you are not letting the agent start the
;          daemon and are still using newrelic.cfg (see below) the license
;          keyword in that file is no longer obeyed. Instead the agent will
;          use the preserved value of that license from the key file.
;          Once you have updated your INI files to contain the license we
;          urge you to remove /etc/newrelic/upgrade_please.key in order to
;          eliminate the potential for confusion about exactly where the key
;          is coming from.
;
newrelic.license = "<%= @newrelic_license_key %>"

; Setting: newrelic.logfile
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the name of the file to send log messages to.
;
<%- if @newrelic_ini_logfile -%>
newrelic.logfile = "<%= @newrelic_ini_logfile %>"
<%- else -%>
newrelic.logfile = "/var/log/newrelic/php_agent.log"
<%- end -%>

; Setting: newrelic.loglevel
; Type   : string
; Scope  : system
; Default: "info"
; Info   : Sets the level of detail to include in the log file. You should
;          rarely need to change this from the default, and usually only under
;          the guidance of technical support.
;          Must be one of the following values:
;            always, error, warning, info, verbose, debug, verbosedebug
;
;newrelic.loglevel = "info"
<%- if @newrelic_ini_loglevel -%>
newrelic.loglevel = "<%= @newrelic_ini_loglevel %>"
<%- end -%>

; Setting: newrelic.high_security
; Type   : boolean
; Scope  : system
; Default: false
; Info   : Enables high security for all applications. When high security is
;          enabled, the following behavior will take effect:
;          * Raw SQL strings will never be gathered, regardless of the value of
;            newrelic.transaction_tracer.record_sql.
;          * Request parameters will never be captured, regardless of the
;            newrelic.attributes configuration settings.
;          * The following API functions will have no effect, and will return
;            false:
;            newrelic_add_custom_parameter
;            newrelic_set_user_attributes
;            newrelic_record_custom_event
;
;          IMPORTANT:  If you change this setting, you must also change the RPM
;          UI security setting. If the two settings do not match, then no data
;          will be collected.
;
;          IMPORTANT: This setting is not compatible with
;          newrelic.security_policies_token. Only one may be set. If both are
;          set an error will be thrown and the agent will not connect.
;
;newrelic.high_security = false
<%- if @newrelic_ini_high_security -%>
newrelic.high_security = <%= @newrelic_ini_high_security %>
<%- end -%>

; Setting: newrelic.appname
; Type   : string
; Scope  : per-directory
; Default: "PHP Application"
; Info   : Sets the name of the application that metrics will be reported into.
;          This can in fact be a list of up to 3 application names, each of
;          which must be separated by a semi-colon. The first name in any such
;          list is considered the 'primary' application name and must be unique
;          for each account / license key.
;
;newrelic.appname = "PHP Application"
<%- if @newrelic_ini_appname -%>
newrelic.appname = "<%= @newrelic_ini_appname %>"
<%- end -%>

; Setting: newrelic.process_host.display_name
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets a custom display name for your application server in the New
;          Relic UI. Servers are normally identified by host and port number.
;          This setting allows you to give your hosts more recognizable names.
;
;newrelic.process_host.display_name = ""

;
; Beginning with version 3.0 of the agent, the daemon can be automatically
; started by the agent. There is no need to start the daemon before starting
; Apache or PHP-FPM. All of the newrelic.daemon.* settings are options that
; control the behavior of the daemon. These settings are converted into the
; appropriate command line options when the agent starts the daemon. This is
; now the preferred method of starting the daemon. There are still usage cases
; (such as using a single daemon for serving multiple Apache instances) where
; you may want to start the daemon via it's init script, but for most users,
; this is the best place to configure and start the daemon.
;
; The agent will only launch the daemon if one isn't already running. Also
; note that the agent will NOT stop the daemon once it has started. If you
; want control over exactly when the daemon starts and stops you can still
; achieve that by creating a daemon configuration file (located by default at
; /etc/newrelic/newrelic.cfg) and running the chkconfig or equivalent command.
; Please see the newrelic.cfg template file for details. That template file
; is located at /usr/lib/newrelic-php5/scripts/newrelic.cfg.template.
;
; Also please note that the options here and in newrelic.cfg are identical,
; except that in this file they are preceded with "newrelic.daemon.".
;

; Setting: newrelic.daemon.logfile
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the name of the file to send daemon log messages to.
;
<%- if @newrelic_daemon_logfile -%>
newrelic.daemon.logfile = "<%= @newrelic_daemon_logfile %>"
<%- else -%>
newrelic.daemon.logfile = "/var/log/newrelic/newrelic-daemon.log"
<%- end -%>

; Setting: newrelic.daemon.loglevel
; Type   : string
; Scope  : system
; Default: "info"
; Info   : Sets the level of detail to include in the daemon log. You should
;          rarely need to change this from the default, and usually only under
;          the guidance of technical support.
;          Must be one of the following values:
;            always, error, warning, info, debug
;
;          The values verbose and verbosedebug are deprecated aliases for debug.
;
;newrelic.daemon.loglevel = "info"
<%- if @newrelic_daemon_loglevel -%>
newrelic.daemon.loglevel = "<%= @newrelic_daemon_loglevel %>"
<%- end -%>

; Setting: newrelic.daemon.address (alias: newrelic.daemon.port)
; Type   : string or integer
; Scope  : system
; Default: "@newrelic" on Linux, "/tmp/.newrelic.sock" otherwise
; Info   : Sets how the agent and daemon communicate. How this is set can impact
;          performance.
;
;          On Linux, the default is to use the abstract socket "@newrelic". An
;          abstract socket can be created by prefixing the socket name with '@'.
;
;          On MacOS and FreeBSD, the default is to use a UNIX-domain socket
;          located at "/tmp/.newrelic.sock". If you want to use UNIX domain
;          sockets then this value must begin with a '/'. 
;
;          If you set this to an integer value in the range 1-65535, then this
;          will instruct the agent to use a normal TCP socket on the port 
;          specified. This may be easier to use if you are using a chroot 
;          environment.
;
;          To connect to a daemon that is running on a different host, set this
;          value to '<host>:<port>', where '<host>' denotes either a host name
;          or an IP address and '<port>' denotes a valid port number. IPv6 is
;          supported.
;
;          In order to use a TCP socket with a port in the range 1-1023,
;          the daemon must be started by the super-user. This is a fundamental
;          OS limitation and not one imposed by the daemon itself.
;
;newrelic.daemon.address = "/tmp/.newrelic.sock"
<%- if @newrelic_daemon_port -%>
newrelic.daemon.port = "<%= @newrelic_daemon_port %>"
<%- end -%>
<%- if @newrelic_daemon_address -%>
newrelic.daemon.address = "<%= @newrelic_daemon_address %>"
<%- end -%>

<%- if @newrelic_daemon_ssl -%>
newrelic.daemon.ssl = <%= @newrelic_daemon_ssl %>
<%- end -%>

; Setting: newrelic.daemon.ssl_ca_bundle
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the location of a file containing CA certificates in PEM
;          format. When set, the certificates in this file will be used to
;          authenticate the New Relic collector servers. If
;          newrelic.daemon.ssl_ca_path is also set (see below), the
;          certificates in this file will be searched first, followed by the
;          certificates contained in the newrelic.daemon.ssl_ca_path
;          directory.
;
;newrelic.daemon.ssl_ca_bundle = ""
<%- if @newrelic_daemon_ssl_ca_bundle -%>
newrelic.daemon.ssl_ca_bundle = "<%= @newrelic_daemon_ssl_ca_bundle %>"
<%- end -%>

; Setting: newrelic.daemon.ssl_ca_path
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the location of a directory containing trusted CA certificates
;          in PEM format. When set, the certificates in this directory will be
;          used to authenticate the New Relic collector servers. If
;          newrelic.daemon.ssl_ca_bundle is also set (see above), it will be
;          searched first followed by the certificates contained in
;          newrelic.daemon.ssl_ca_path.
;
;newrelic.daemon.ssl_ca_path = ""
<%- if @newrelic_daemon_ssl_ca_path -%>
newrelic.daemon.ssl_ca_path = "<%= @newrelic_daemon_ssl_ca_path %>"
<%- end -%>

; Setting: newrelic.daemon.proxy
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the host and user credentials to use as an egress proxy. This
;          is only used if your site requires a proxy in order to access
;          external servers on the internet, in this case the New Relic data
;          collection servers. This is expressed in one of the following forms:
;             hostname
;             hostname:port
;             user@hostname
;             user@hostname:port
;             user:password@hostname
;             user:password@hostname:port
;
;newrelic.daemon.proxy = ""
<%- if @newrelic_daemon_proxy -%>
newrelic.daemon.proxy = "<%= @newrelic_daemon_proxy %>"
<%- end -%>

; Setting: newrelic.daemon.pidfile
; Type   : string
; Scope  : system
; Default: OS dependent
; Info   : Sets the name of the file to store the running daemon's process ID
;          (PID) in. This file is used by the daemon startup and shutdown
;          script to determine whether or not the daemon is already running.
;
;newrelic.daemon.pidfile = ""
<%- if @newrelic_daemon_pidfile -%>
newrelic.daemon.pidfile = "<%= @newrelic_daemon_pidfile %>"
<%- end -%>

; Setting: newrelic.daemon.location
; Type   : string
; Scope  : system
; Default: /usr/bin/newrelic-daemon
; Info   : Sets the name of the daemon executable to launch.
;          Please note that on OpenSolaris where /usr is frequently a read-only
;          file system, the default daemon location is
;          /opt/newrelic/bin/newrelic-daemon.
;
;newrelic.daemon.location = "/usr/bin/newrelic-daemon"
<%- if @newrelic_daemon_location -%>
newrelic.daemon.location = "<%= @newrelic_daemon_location %>"
<%- end -%>

; Setting: newrelic.daemon.collector_host
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the host name of the New Relic data collector host to use.
;          Please note that this is NOT any form of local host. It refers to
;          the New Relic provided host. There is very little reason to ever
;          change this from the default except in certain very special
;          circumstances, and then only on instruction from a New Relic sales
;          person or support staff member.
;
;newrelic.daemon.collector_host = ""
<%- if @newrelic_daemon_collector_host -%>
newrelic.daemon.collector_host = "<%= @newrelic_daemon_collector_host %>"
<%- end -%>

; Setting: newrelic.daemon.dont_launch
; Type   : integer (0, 1, 2 or 3)
; Scope  : system
; Default: 0
; Info   : If you prefer to have the daemon launched externally before the
;          agent starts up, set this variable to non-zero. The value you
;          choose determines exactly when the agent is allowed to start the
;          daemon:
;          0 - agent can start the daemon any time it needs to
;          1 - non-CLI (i.e Apache / php-fpm) agents can start the daemon
;          2 - only CLI agents can start the daemon
;          3 - the agent will never start the daemon
;
;newrelic.daemon.dont_launch = 0
<%- if @newrelic_daemon_dont_launch -%>
newrelic.daemon.dont_launch = <%= @newrelic_daemon_dont_launch %>
<%- end -%>


; Setting: newrelic.error_collector.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enable the New Relic error collector. This will record the 20 most
;          severe errors per harvest cycle. It is rare to want to disable this.
;          Please also note that your New Relic subscription level may force
;          this to be disabled regardless of any value you set for it.
;
;newrelic.error_collector.enabled = true
<%- unless @newrelic_ini_error_collector_enabled -%>
newrelic.error_collector.enabled = <%= @newrelic_ini_error_collector_enabled %>
<%- end -%>


; Setting: newrelic.error_collector.record_database_errors
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Currently only supported for MySQL database functions. If enabled,
;          this will cause errors returned by various MySQL functions to be
;          treated as if they were PHP errors, and thus subject to error
;          collection. This is only obeyed if the error collector is enabled
;          above and the account subscription level permits error trapping.
;
;newrelic.error_collector.record_database_errors = false
<%- if @newrelic_ini_error_collector_record_database_errors -%>
newrelic.error_collector.record_database_errors = <%= @newrelic_ini_error_collector_record_database_errors %>
<%- end -%>

; Setting: newrelic.error_collector.prioritize_api_errors
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : If the error collector is enabled and you use the New Relic API to
;          notice an error, if this is set to true then assign the highest
;          priority to such errors.
;
;newrelic.error_collector.prioritize_api_errors = false
<%- if @newrelic_ini_error_collector_prioritize_api_errors -%>
newrelic.error_collector.prioritize_api_errors = <%= @newrelic_ini_error_collector_prioritize_api_errors %>
<%- end -%>

; Setting: newrelic.browser_monitoring.auto_instrument
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables automatic real user monitoring ("auto-RUM").
;          When enabled will cause the agent to insert a header and a footer
;          in HTML output that will time the actual end-user experience.
;
;newrelic.browser_monitoring.auto_instrument = true
newrelic.browser_monitoring.auto_instrument = "<%= @newrelic_ini_browser_monitoring_auto_instrument %>"

; Setting: newrelic.transaction_tracer.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables the transaction tracer. When enabled this will
;          produce a detailed call graph for any transaction that exceeds a
;          certain threshold (see next entry). Only one transaction trace per
;          application per harvest cycle is stored and it is always the slowest
;          transaction during that cycle. Transaction traces are extremely
;          useful when diagnosing problem spots in your application. Please
;          note that TT's may be disabled by your account subscription level
;          regardless of what you set here.
;
;newrelic.transaction_tracer.enabled = true
<%- unless @newrelic_ini_transaction_tracer_enabled -%>
newrelic.transaction_tracer.enabled = <%= @newrelic_ini_transaction_tracer_enabled %>
<%- end -%>

; Setting: newrelic.transaction_tracer.threshold
; Type   : string with a time specification or the word "apdex_f"
; Scope  : per-directory
; Default: "apdex_f"
; Info   : Specifies the threshold above which a transaction becomes a
;          candidate for the transaction tracer. This can either be an absolute
;          time value like "200ms" or "1s250ms" or "1h30m" or "750us" or the
;          word "apdex_f". This last value, "apdex_f", means "4 times apdex_t".
;          Thus the threshold changes according to your apdex_t setting. This
;          is the default.
;
;newrelic.transaction_tracer.threshold = "apdex_f"
<%- if @newrelic_ini_transaction_tracer_threshold -%>
newrelic.transaction_tracer.threshold = "<%= @newrelic_ini_transaction_tracer_threshold %>"
<%- end -%>

; Setting: newrelic.transaction_tracer.detail
; Type   : integer in the range 0-1
; Scope  : per-directory
; Default: 1
; Info   : Sets the level of detail in a transaction trace. Setting this to 0
;          will only show the relatively few PHP functions that New Relic has
;          deemed to be "interesting", as well as any custom functions you set
;          (see below). A setting of 1 will trace and time all user functions.
;
;          In earlier releases of the agent this was known as "top100".
;
;newrelic.transaction_tracer.detail = 1
<%- if @newrelic_ini_transaction_tracer_detail -%>
newrelic.transaction_tracer.detail = <%= @newrelic_ini_transaction_tracer_detail %>
<%- end -%>

; Setting: newrelic.transaction_tracer.slow_sql
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables the "slow SQL" tracer. When enabled, this will
;          record the top 10 slowest SQL calls along with a stack trace of
;          where the call occurred in your code.
;
;newrelic.transaction_tracer.slow_sql = true
<%- if @newrelic_ini_transaction_tracer_slow_sql -%>
newrelic.transaction_tracer.slow_sql = <%= @newrelic_ini_transaction_tracer_slow_sql %>
<%- end -%>

; Setting: newrelic.transaction_tracer.stack_trace_threshold
; Type   : time specification string ("500ms", "1s750ms" etc)
; Scope  : per-directory
; Default: 500ms
; Info   : Sets the threshold above which the New Relic agent will record a
;          stack trace for a transaction trace.
;
;newrelic.transaction_tracer.stack_trace_threshold = 500
<%- if @newrelic_ini_transaction_tracer_stack_trace_threshold -%>
newrelic.transaction_tracer.stack_trace_threshold = <%= @newrelic_ini_transaction_tracer_stack_trace_threshold %>
<%- end -%>

; Setting: newrelic.transaction_tracer.explain_enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables requesting "explain plans" from MySQL databases
;          accessed via MySQLi or PDO_MySQL for slow SQL calls. The threshold
;          for requesting explain plans is defined below.
;
;newrelic.transaction_tracer.explain_enabled = true
<%- if @newrelic_ini_transaction_tracer_explain_enabled -%>
newrelic.transaction_tracer.explain_enabled = <%= @newrelic_ini_transaction_tracer_explain_enabled %>
<%- end -%>

; Setting: newrelic.transaction_tracer.explain_threshold
; Type   : time specification string ("750ms", "1s 500ms" etc)
; Scope  : per-directory
; Default: 500ms
; Info   : Used by the slow SQL tracer to set the threshold above which an SQL
;          statement is considered "slow", and to set the threshold above which
;          the transaction tracer will request an "explain plan" from the data-
;          base for slow SQL. This latter feature may not be active yet, please
;          refer to the agent release notes to see when it becomes available.
;          Only relevant if explain_enabled above is set to true.
;
;newrelic.transaction_tracer.explain_threshold = 500
<%- if @newrelic_ini_transaction_tracer_explain_threshold -%>
newrelic.transaction_tracer.explain_threshold = <%= @newrelic_ini_transaction_tracer_explain_threshold %>
<%- end -%>

; Setting: newrelic.transaction_tracer.record_sql
; Type   : "off", "raw" or "obfuscated"
; Scope  : per-directory
; Default: "obfuscated"
; Info   : Sets how SQL statements are recorded (if at all). If this is set to
;          "raw" then no attempt is made at obfuscating SQL statements.
;          USING "raw" IS HIGHLY DISCOURAGED IN PRODUCTION ENVIRONMENTS!
;          Setting this to "raw" has considerable security implications as it
;          can expose sensitive and private customer data.
;
;newrelic.transaction_tracer.record_sql = "obfuscated"
<%- if @newrelic_ini_transaction_tracer_record_sql -%>
newrelic.transaction_tracer.record_sql = <%= @newrelic_ini_transaction_tracer_record_sql %>
<%- end -%>

; Setting: newrelic.transaction_tracer.custom
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Sets the name(s) of additional functions you want to instrument and
;          appear in transaction traces. This is only meaningful if you have
;          set newrelic.transaction_tracer.detail to 0. This can be a comma-
;          separated list of function or class method names.
;
;newrelic.transaction_tracer.custom = ""
<%- if @newrelic_ini_transaction_tracer_custom -%>
newrelic.transaction_tracer.custom = "<%= @newrelic_ini_transaction_tracer_custom %>"
<%- end -%>


; Setting: newrelic.framework
; Type   : string
; Scope  : per-directory
; Default: empty (auto-detect framework)
; Info   : Disables automatic framework detection, telling the agent to
;          attempt to name transactions according to the specified framework.
;          Specifying "no_framework" will disable framework-related transaction
;          naming entirely. Please let us know at support.newrelic.com if you
;          encounter a failure with framework autodetection.
;
;          Must be one of the following values:
;          cakephp, codeigniter, drupal, drupal8, joomla, kohana, laravel,
;          magento, magento2, mediawiki, silex, slim, symfony1, symfony2,
;          wordpress, yii, zend, zend2, no_framework
;
;          Note that "drupal" covers only Drupal 6 and 7.
;
;newrelic.framework = ""
<%- if @newrelic_ini_framework -%>
newrelic.framework = "<%= @newrelic_ini_framework %>"
<%- end -%>

; Setting: newrelic.webtransaction.name.remove_trailing_path
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Used to aid naming transactions correctly when an unsupported
;          framework is being used. This option will cause anything after the
;          script name to be stripped from a URL. For example, setting this
;          would cause the "/xyz/zy" to be stripped from a URL such as
;          "/path/to/foo.php/xyz/zy".
;
;newrelic.webtransaction.name.remove_trailing_path = false

; Setting: newrelic.webtransaction.name.functions
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Unless a specific framework such as Drupal or Wordpress has been
;          detected, transactions are named according to the first script
;          encountered, such as login.php. However, if you use a dispatcher
;          file such as index.php this produces less useful data. If you use
;          a dispatcher to redirect to actions such as "login", "show", "edit"
;          etc, you can set this to the top level functions for those actions,
;          and the function names specified here will be used to name the
;          transaction.
;
;newrelic.webtransaction.name.functions = ""

; Setting: newrelic.webtransaction.name.files
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Same as newrelic.webtransaction.name.functions above but using file
;          names instead of function names. Accepts standard POSIX regular
;          expressions.
;
;newrelic.webtransaction.name.files = ""
<%- if @newrelic_ini_webtransaction_name_files -%>
newrelic.webtransaction.name.files = "<%= @newrelic_ini_webtransaction_name_files %>"
<%- end -%>

; Setting: newrelic.daemon.auditlog
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the name of a file to record all uncompressed, un-encoded
;          content that is sent from your machine to the New Relic servers.
;          This includes the full URL for each command along with the payload
;          delivered with the command. This allows you to satisfy yourself
;          that the agent is not sending any sensitive data to our servers.
;          This file must be a different file the the newrelic.daemon.logfile
;          setting above. If you set it to the same name,
;          then audit logging will be silently ignored.
;
;newrelic.daemon.auditlog = "/var/log/newrelic/audit.log"

; Setting: newrelic.transaction_events.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Collect and report transaction analytics event data. Event data
;          allows the New Relic UI to show additional information such as
;          histograms. This setting was formerly called
;          newrelic.analytics_events.enabled.
;
;newrelic.transaction_events.enabled = true
<%- unless @newrelic_ini_transaction_events -%>
newrelic.transaction_events.enabled = <%= @newrelic_ini_transaction_events %>
<%- end -%>

; Setting: newrelic.attributes.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enable or disable the collection of attributes generated by the
;          agent or generated by the user though newrelic_add_custom_parameter.
;          This setting will take precedence over all other attribute
;          configuration settings. For more information, please refer to:
;          https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-metrics/agent-attributes
;
;newrelic.attributes.enabled = true
<%- unless @newrelic_ini_attributes_enabled -%>
attributes.enabled = <%= @newrelic_ini_attributes_enabled %>
<%- end -%>

; Setting: newrelic.transaction_events.attributes.enabled
;          newrelic.transaction_tracer.attributes.enabled
;          newrelic.error_collector.attributes.enabled
;          newrelic.browser_monitoring.attributes.enabled
;          newrelic.span_events.attributes.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true, except for browser_monitoring.attributes.enabled
; Info   : Control which destinations receive attributes.
;          These configuration settings will override the .include and .exclude
;          settings below. For more information, please refer to:
;          https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-metrics/agent-attributes
;
;          These settings were formerly called:
;          newrelic.transaction_tracer.capture_attributes
;          newrelic.error_collector.capture_attributes
;          newrelic.analytics_events.capture_attributes
;          newrelic.browser_monitoring.capture_attributes
;
;newrelic.transaction_events.attributes.enabled = true
;newrelic.transaction_tracer.attributes.enabled = true
;newrelic.error_collector.attributes.enabled = true
;newrelic.browser_monitoring.attributes.enabled = false
;newrelic.span_events.attributes.enabled = true

; Setting: newrelic.attributes.include
;          newrelic.attributes.exclude
;
;          newrelic.transaction_events.attributes.include
;          newrelic.transaction_events.attributes.exclude
;
;          newrelic.transaction_tracer.attributes.include
;          newrelic.transaction_tracer.attributes.exclude
;
;          newrelic.error_collector.attributes.include
;          newrelic.error_collector.attributes.exclude
;
;          newrelic.browser_monitoring.attributes.include
;          newrelic.browser_monitoring.attributes.exclude
;
;          newrelic.span_events.attributes.include
;          newrelic.span_events.attributes.exclude
;
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Each attribute has a default set of destinations. For example, the
;          'request_uri' attribute's default destinations are errors and
;          transaction traces. The 'httpResponseCode' attribute's default
;          destinations are errors, transaction traces, and transaction events.
;
;          These configuration options allow complete control over the
;          destinations of attributes.
;
;          To include the attribute whose key is 'alpha' in errors, the
;          configuration is:
;          newrelic.error_collector.include = alpha
;
;          To exclude the attribute whose key is 'alpha' from errors, the
;          configuration is:
;          newrelic.error_collector.exclude = alpha
;
;          The newrelic.attributes.exclude and newrelic.attributes.include
;          settings affect all destinations.
;
;          To exclude the attributes 'beta' and 'gamma' from all destinations,
;          the configuration is:
;          newrelic.attributes.exclude = beta,gamma
;
;          If one of the values in the comma separated list ends in a '*',
;          it will match any suffix. For example, to exclude any attributes
;          which begin with 'psi', the configuration is:
;          newrelic.attributes.exclude = psi*
;
;          For more information, please refer to:
;          https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-metrics/agent-attributes
;
;newrelic.attributes.include = ""
;newrelic.attributes.exclude = ""
<%- if @newrelic_ini_capture_params -%>
newrelic.attributes.include = request.parameters.*
<%- end -%>
;
;newrelic.transaction_events.attributes.include = ""
;newrelic.transaction_events.attributes.exclude = ""
;
;newrelic.transaction_tracer.attributes.include = ""
;newrelic.transaction_tracer.attributes.exclude = ""
;
;newrelic.error_collector.attributes.include = ""
;newrelic.error_collector.attributes.exclude = ""
;
;newrelic.browser_monitoring.attributes.include = ""
;newrelic.browser_monitoring.attributes.exclude = ""
;
;newrelic.span_events.attributes.include = ""
;newrelic.span_events.attributes.exclude = ""
<%- if @newrelic_ini_labels -%>
newrelic.labels = "<%= @newrelic_ini_labels %>"
<%- end -%>

; Setting: newrelic.feature_flag
; Type   : string
; Scope  : system
; Default: none
; Info   : Enables new and experimental features within the PHP agent. These
;          flags are used to selectively enable features that are intended to be
;          enabled by default in later versions of the PHP agent.
;
;newrelic.feature_flag = ""

; Setting: newrelic.custom_insights_events.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables the API function newrelic_record_custom_event.
;
;newrelic.custom_insights_events.enabled = true

; Setting: newrelic.labels
; Type   : string (Use quotes)
; Scope  : per-directory
; Default: none
; Info   : Sets the label names and values to associate with the application.
;          The list is a semi-colon delimited list of colon-separated name and
;          value pairs.
;
;          There are a maximum of 64 label name/value pairs allowed.
;
;          The maximum length of the name and value is 255 characters each.
;
;          Leading or trailing whitespace in the name or value will be trimmed.
;
;          UTF-8 characters are allowed.
;
;          E.g., "Server:One;Data Center:Primary"
;
;newrelic.labels = ""

; Setting: newrelic.synthetics.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables support for Synthetics transactions.
;          For more information, please see:
;          https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/getting-started/new-relic-synthetics
;
;newrelic.synthetics.enabled = true

; Setting: newrelic.cross_application_tracer.enabled
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Enables or disables support for Cross Application Tracing, aka "CAT".
;          NOTE: As of April 2022 CAT has been deprecated and will be removed at a future date.
;
;newrelic.cross_application_tracer.enabled = false

; Setting: newrelic.distributed_tracing_enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Distributed tracing lets you see the path that a request takes
;          through your distributed system. See this guide for more information:
;          https://docs.newrelic.com/docs/distributed-tracing/concepts/introduction-distributed-tracing
;          When distributed tracing is enabled it changes the behavior of some
;          New Relic features. See this guide for details:
;          https://docs.newrelic.com/docs/transition-guide-distributed-tracing
;
;newrelic.distributed_tracing_enabled = true
<%- if not @newrelic_ini_distributed_tracing_enabled -%>
newrelic.distributed_tracing_enabled = <%= @newrelic_ini_distributed_tracing_enabled %>
<%- end -%>

; Setting: newrelic.distributed_tracing_exclude_newrelic_header
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Set this to true to exclude the New Relic distributed tracing header
;          that is attached to outbound requests, and to instead only rely on
;          W3C Trace Context Headers for distributed tracing. If this is false
;          then both types of headers are attached to outbound requests.
;
;          The New Relic distributed tracing header allows interoperability
;          with older agents that do not support W3C Trace Context headers.
;          Agent versions that support W3C Trace Context headers will
;          prioritize them over New Relic headers for distributed tracing.    
;
;newrelic.distributed_tracing_exclude_newrelic_header = false

; Setting: newrelic.span_events_enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables the creation of span events. This requires
;          Distributed Tracing to be enabled.
;
;newrelic.span_events_enabled = true

; Setting: newrelic.span_events.max_samples_stored
; Type   : unsigned integer
; Scope  : per-directory
; Default: 2000
; Info   : The maximum number of span events added to the span event reservoir
;          per transaction. A value of 0 will use the agent default.  The max
;          setting is 10000.
;
;newrelic.span_events.max_samples_stored = 0


; Setting: newrelic.infinite_tracing.trace_observer.host
; Type   : string
; Scope  : per-directory
; Default:
; Info   : Configures the Trace Observer used for Infinite Tracing. If empty,
;          Infinite Tracing support will be disabled. This requires Distributed
;          Tracing and span events to be enabled.
;
;newrelic.infinite_tracing.trace_observer.host=

; Setting: newrelic.infinite_tracing.trace_observer.port
; Type   : integer
; Scope  : per-directory
; Default: 443
; Info   : Configures the port used to communicate with the Infinite Tracing
;          Trace Observer. This setting is ignored if
;          newrelic.infinite_tracing.trace_observer.host is empty. This setting
;          will not usually need to be changed.
;
;newrelic.infinite_tracing.trace_observer.port=443

; Setting: newrelic.infinite_tracing.span_events.queue_size
; Type   : integer (1000 or higher)
; Scope  : per-directory
; Default: 100000
; Info   : Sets the number of span events that can be queued for transmission
;          to the Infinite Tracing Trace Observer.
;
;          The agent internally manages span events for Infinite Tracing in
;          span batches. Those span batches can hold a maximum of 1000 spans.
;          Therefore, the span events queue size cannot be lower than 1000, as
;          otherwise not even a single span batch can be queued. If a queue
;          size lower than 1000 is specified, the mininum size of 1000 is used.
;
;newrelic.infinite_tracing.span_events.queue_size=100000

; Setting: newrelic.transaction_tracer.gather_input_queries
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables support for tracing Doctrine DQL with Slow SQL queries.
;          This requires Slow SQLs to be enabled.
;
;newrelic.transaction_tracer.gather_input_queries = true

; Setting: newrelic.error_collector.capture_events
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables capturing error events, which are displayed as
;          Error Analytics in the UI.
;
;newrelic.error_collector.capture_events = true

; Setting: newrelic.guzzle.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables support for the Guzzle library.
;
;newrelic.guzzle.enabled = true

; Setting: newrelic.phpunit_events.enabled
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Collect and report PHPUnit (https://phpunit.de/) data as custom
;          Insights events. Test suite summary data are sent as "TestSuite"
;          events, while individual test cases are sent as "Test" events.
;          Depending on your events retention policy, enabling this setting may
;          impact your billing statement.
;
;          Please note that exception messages are collected and sent with
;          events. Additionally, if you use PHPUnit's --disallow-test-output
;          flag, any offending output from a risky test will also be included.
;
;newrelic.phpunit_events.enabled = false

; Setting: newrelic.datastore_tracer.instance_reporting.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables capturing datastore instance information,
;          specifically host and port_path_or_id. This information is sent as a
;          metric and as attributes on transaction traces and slow SQL traces.
;
;newrelic.datastore_tracer.instance_reporting.enabled = true

; Setting: newrelic.datastore_tracer.database_name_reporting.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables capturing information about database names. This
;          information is sent as an attribute on transaction traces and slow
;          SQL traces.
;
;newrelic.datastore_tracer.database_name_reporting.enabled = true

; Setting: newrelic.security_policies_token
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Enables or disables security policies. If security policies are
;          enabled on your account, you should paste the security policies token
;          from the New Relic APM UI here.
;
;          IMPORTANT: This setting is not compatible with newrelic.high_security.
;          Only one may be set. If both are set an error will be thrown and the
;          agent will not connect.
;
;newrelic.security_policies_token = ""

; Setting: newrelic.preload_framework_library_detection
; Type   : boolean
; Scope  : system
; Default: true
; Info   : Enables detection of frameworks and libraries from opcache.
;
;          This only happens when preloading is enabled (when `opcache.preload`
;          is set).
;
;newrelic.preload_framework_library_detection = true

; setting: newrelic.transaction_tracer.max_segments_web
; type   : integer in the range 0 - 2^31-1
; scope  : per-directory
; default: 0
; info   : Specifies the maximum number of segments the PHP agent shall
;          record, once that maximum is reached sampling will occur.
;
;          The PHP agent reports transaction traces and distributed traces as a
;          collection of segments.
;          Each segment represents a method or a function call in a transaction
;          trace. The default value for this configuration is 0, indicating that
;          the PHP agent shall capture all segments during a transaction. At the
;          end of a transaction, it assembles the highest priority segments to
;          report in a transaction trace.
;
;          For long-running PHP processes with hundreds of thousands or millions
;          of function calls, setting this to a value greater than 1 prevents the
;          PHP agent from exhausting system memory when recording segments.
;
;          Segment size can vary based upon the length of the corresponding
;          method's name, the length of its class name, and the number of
;          subsequent calls made by the method. That said, a conservative estimate
;          is 400 bytes per segment. To limit the PHP agent to 40 mb for segment
;          capture, set this value to 100000.  If this value is set lower than
;          2000, it further limits the total number of segments reported for
;          transaction traces.
;
;          This configuration setting is only for PHP web processes; it will not
;          effect PHP CLI processes. To set a limit for CLI processes use
;          newrelic.transaction_tracer.max_segments_cli.
;newrelic.transaction_tracer.max_segments_web = 0

; setting: newrelic.transaction_tracer.max_segments_cli
; type   : integer in the range 0 - 2^31-1
; scope  : per-directory
; default: 100000
; info   : Specifies the maximum number of segments the PHP agent shall
;          record, once that maximum is reached sampling will occur.
;
;          The PHP agent reports a transaction trace as a collection of segments.
;          each segment represents a method or a function call in a transaction
;          trace. The default value for this configuration is 100000. When a value
;          of less than 1 is set, it will indicate that the PHP agent shall capture
;          all segments during a transaction. At the end of a transaction, the agent
;          assembles the highest priority segments to report in a transaction trace.
;
;          For long-running PHP processes with hundreds of thousands or millions
;          of function calls, setting this to a value greater than 1 prevents the
;          PHP agent from exhausting system memory when recording segments.
;
;          Segment size can vary based upon the length of the corresponding
;          method's name, the length of its class name, and the number of
;          subsequent calls made by the method. That said, a conservative estimate
;          is 400 bytes per segment. To limit the PHP agent to 40 mb for segment
;          capture, set this value to 100000. If this value is set lower than 2000,
;          it further limits the total number of segments reported for transaction
;          traces.
;
;          This configuration setting is only for PHP CLI processes; it will not
;          effect PHP web processes. To set a limit for web processes use
;          newrelic.transaction_tracer.max_segments_web.
;newrelic.transaction_tracer.max_segments_cli = 100000

; Setting: newrelic.capture_params
; Info   : This setting has been deprecated.
;          It was formerly used to capture request parameters.
;          It has been replaced by the attribute configuration settings.
;          To replicate this setting with the new settings, one would use:
;
;          newrelic.transaction_tracer.attributes.include = request.parameters.*
;          newrelic.error_collector.attributes.include = request.parameters.*
;
;          Please refer to the attribute configuration options for more
;          information.

; Setting: newrelic.ignored_params
; Info   : This setting has been deprecated.
;          It was formerly used to filter request parameters.
;          It has been replaced by the attribute configuration settings.
;          If you would like to exclude the request parameter 'alpha', use:
;
;          newrelic.attributes.exclude = request.parameters.alpha
;
;          Please refer to the attribute configuration options for more
;          information.

; Setting: newrelic.framework.drupal.modules
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Indicates if Drupal modules, hooks and views are to be instrumented.
;
;newrelic.framework.drupal.modules = true

; Setting: newrelic.framework.wordpress.hooks
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Indicates if WordPress hooks are to be instrumented.
;
;newrelic.framework.wordpress.hooks = true

; Setting: newrelic.application_logging.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : An overall configuration for enabling/disabling all application
;          logging features. If this is disabled, all sub-features are disabled;
;          if it is enabled, the individual sub-feature configurations
;          take effect.
;
;newrelic.application_logging.enabled = true

; Setting: newrelic.application_logging.forwarding.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Toggles whether the agent gathers log records for sending to New Relic.
;
;newrelic.application_logging.forwarding.enabled = true

; Setting: newrelic.application_logging.forwarding.max_samples_stored
; Type   : integer
; Scope  : per-directory
; Default: 10000
; Info   : Number of log records to send per minute to New Relic. Controls the 
;          overall memory consumption when using log forwarding.
;
;newrelic.application_logging.forwarding.max_samples_stored = 10000

; Setting: newrelic.application_logging.forwarding.log_level
; Type   : string
; Scope  : per-directory
; Default: "WARNING"
; Info   : Sets the minimum log level to be collected when log forwarding
;          is enabled. 
;
;          Based on
;           https://www.php-fig.org/psr/psr-3/#5-psrlogloglevel
;           https://datatracker.ietf.org/doc/html/rfc5424
;
;          Valid settings (ordered highest to lowest):
;           "EMERGENCY"
;           "ALERT"
;           "CRITICAL"
;           "ERROR"
;           "WARNING"
;           "NOTICE"
;           "INFO"
;           "DEBUG"
;          
;newrelic.application_logging.forwarding.log_level = "WARNING"

; Setting: newrelic.application_logging.metrics.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Toggles whether the agent gathers the Logging/lines and
;          Logging/lines/{SEVERITY} Logging Metrics used in the Logs chart
;          on the APM Summary page.
;
;newrelic.application_logging.metrics.enabled = true
